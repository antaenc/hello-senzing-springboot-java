package com.senzing.senzingdemo.controllers;

import com.senzing.senzingdemo.G2EngineFacade;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@Api(value = "A thin wrapper around the Senzing Engine")
public class EngineController {

  private final G2EngineFacade engine;

  @Autowired
  public EngineController(G2EngineFacade engine) {
    this.engine = engine;
  }

  @GetMapping(value = "/stats")
  @ApiOperation(value = "Retrieve workload statistics for current process")
  public String stats() {
    return engine.stats();
  }

  @GetMapping(value = "/get-active-config-id")
  @ApiOperation(value = "Retrieve engine's active configuration id")
  public long getActiveConfigID() {
    return engine.getActiveConfigID();
  }

  @GetMapping(value = "/export-config")
  @ApiOperation(value = "Retrieve engine's export configuration details")
  public String exportConfig() {
    return engine.exportConfig();
  }

  @GetMapping(value = "/get-repository-last-modified-time")
  @ApiOperation(value = "Retrieve repository's last modified time")
  public long getRepositoryLastModifiedTime() {
    return engine.getRepositoryLastModifiedTime();
  }

  @PostMapping(value = "/add-record/{dataSource}/{recordID}")
  @ApiOperation(value = "Add a record for the data source")
  public void addRecord(@PathVariable("dataSource") String dataSource,
                        @PathVariable String recordID,
                        @RequestBody String record) {
    engine.addRecord(dataSource, recordID, record);
  }

  @PostMapping(value = "/add-record/{dataSource}")
  @ApiOperation(value = "Add a record for the data source and return the recordID generated by the engine.")
  public String addRecordWithReturnedRecordID(@PathVariable("dataSource") String dataSourceCode,
                                              @RequestBody String record) {
    return engine.addRecordWithReturnedRecordID(dataSourceCode, record);
  }

  @DeleteMapping(value = "/delete-record/{dataSource}/{recordID}")
  @ApiOperation(value = "Delete record from data source")
  public void deleteRecord(@PathVariable("dataSource") String dataSource,
                           @PathVariable String recordID) {
    engine.deleteRecord(dataSource, recordID);
  }

  @PostMapping(value = "replace-record/{dataSource}/{recordID}")
  @ApiOperation(value = "Replace record in data source")
  public void replaceRecord(@PathVariable("dataSource") String dataSourceCode,
                            @PathVariable("recordID") String recordID,
                            @RequestBody String record) {
    engine.replaceRecord(dataSourceCode, recordID, record);
  }

  @GetMapping(value = "/get-entity-by-entity-id/{entityID}")
  @ApiOperation(value = "Look up an entity by its unique numerical ID")
  public String getEntityByEntityID(@PathVariable long entityID) {
    return engine.getEntityByEntityID(entityID);
  }

  @GetMapping(value = "/get-entity-by-record-id/{dataSource}/{recordID}")
  @ApiOperation(value = "Look up an entity by an alphanumeric ID")
  public String getEntityByRecordID(@PathVariable("dataSource") String dataSource,
                                    @PathVariable String recordID) {
    return engine.getEntityByRecordID(dataSource, recordID);
  }

  @PostMapping(value = "/purge-repository")
  @ApiOperation(value = "Removes all records from the engine's repository")
  public void purgeRepository() {
    engine.purgeRepository();
  }

  @GetMapping(value = "/get-record/{dataSource}/{recordID}")
  @ApiOperation(value = "Look up a record by its ID")
  public String getRecord(@PathVariable("dataSource") String dataSource,
                          @PathVariable("recordID") String recordID) {
    return engine.getRecord(dataSource, recordID);
  }

  @GetMapping(value = "/search-by-attributes")
  @ApiOperation("See which records and entities would match the query string if it were added as a record")
  @ApiParam(name = "q", value = "The query string", required = true)
  public String searchByAttributes(@RequestParam(value = "q") String q) {
    return engine.searchByAttributes(q);
  }
}
